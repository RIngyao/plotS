#   tabPanel(
#     title = "Help", icon = icon("book-open"),
#     # includeHTML("www/plotS.Rmd")
#     includeMarkdown("www/plotS_help.Rmd")
#   ) %>% tagAppendAttributes(class="helpPanel")#end of help section-----------------
# )
)
# Define server logic required to draw a histogram
server <- function(input, output) {
}
# Run the application
shinyApp(ui = ui, server = server)
source("global.R", local = TRUE)
ui <- fluidPage(
#CSS----------------
tags$head(
tags$style(
HTML("
/*general*/
body{
margin: 0;
font-family: Arial, Helvetica, sans-serif;
font-size:17px;
}
.box{
-moz-box-shadow:none !important;
-webkit-box-shadow:none !important;
-goog-ms-box-shadow:none !important;
box-shadow:none !important;
}
/*Header*/
#header {
overflow: hidden;
/* background-image:linear-gradient(to bottom, rgba(69, 215, 250, 0.3), white);*/
/*background-image:linear-gradient(70deg, white, rgba(69, 215, 250, 0.3), white);*/
background-image:radial-gradient(rgba(12, 191, 227, 1), white, white);
}
#projectTitle{
overflow: hidden;
border-radius:50%;
width:70px;
height:70px;
background-image: radial-gradient(at 80% 20%,  white, #45D7FA);
box-shadow: 10px -5px 10px #06BBE7 inset,  3px 2px 10px white;
margin-bottom:5px;
}
/*perfect 90% 90%  45D7FA
box-shadow: 10px 2px 10px #45D7FA inset,  3px 2px 10px white*/
#projectTitle h1{
text-align:center;
color: #057C94 ; /*;0890AB*/
font-weight:bold;
font-size:25px;
font-family:'Times New Roman', Times, serif, Arial, Helvetica, sans-serif;
padding: 3% 0 0 10%;
text-shadow:2px 4px 2px #45D7FA, 2px 0 10px white;
}
/*Main content*/
#plotTabset{
display:flex;
justify-content:center;
}
")
)
), #end of css-----------------
# Application title
div(id="header",
div(
id="projectTitle",
tags$h1("PlotS")
)
),
#content-------------------
div(
id="content",
tabsetPanel(
id = "plotTabset",
tabPanel(title = "About",
#Here instruction for data type will be given
HTML('
<div class = "inst">
<hr></hr>
<p>
<b>PlotS</b> is a web-based application for data analysis and visualization. It is free and easy to use. You can analyze your data in an engaging way by running statistical tests while plotting the graphs. We hope that it will be a useful tool for performing quick analysis.
</p>
<p>
The list of graphs currently available for plotting:
<ul>
<li>Bar plot</li>
<li>Box plot</li>
<li>Density plot</li>
<li>Frequency polygone</li>
<li>Histogram</li>
<li>Line plot</li>
<li>Scatter plot</li>
</ul>
For statistical analysis, we have included the most commonly used parametric and non-parametric methods:
<ul>
<li><b>Parametric test</b></li>
<ul>
<li>T-test</li>
<li>ANOVA (One-way and Two-way)</li>
</ul>
<li><b>Non-parametric test</b></li>
<ul>
<li>Wilcoxon test</li>
<li>Kruskal-Wallis test</li>
</ul>
</p>
</div>'
)#end HTML
),
#Analyze & visualize-------------------
tabPanel(
#This panel will be shown as interactive when the figure is ready
title = "Analyze & visualize", value = "chart", icon = icon("chart-pie"),
"here is the name and title of thhe value of daead andns hthhw"
tabBox(id="tabBox",
source("global.R", local = TRUE)
ui <- fluidPage(
#CSS----------------
tags$head(
tags$style(
HTML("
/*general*/
body{
margin: 0;
font-family: Arial, Helvetica, sans-serif;
font-size:17px;
}
.box{
-moz-box-shadow:none !important;
-webkit-box-shadow:none !important;
-goog-ms-box-shadow:none !important;
box-shadow:none !important;
}
/*Header*/
#header {
overflow: hidden;
/* background-image:linear-gradient(to bottom, rgba(69, 215, 250, 0.3), white);*/
/*background-image:linear-gradient(70deg, white, rgba(69, 215, 250, 0.3), white);*/
background-image:radial-gradient(rgba(12, 191, 227, 1), white, white);
}
#projectTitle{
overflow: hidden;
border-radius:50%;
width:70px;
height:70px;
background-image: radial-gradient(at 80% 20%,  white, #45D7FA);
box-shadow: 10px -5px 10px #06BBE7 inset,  3px 2px 10px white;
margin-bottom:5px;
}
/*perfect 90% 90%  45D7FA
box-shadow: 10px 2px 10px #45D7FA inset,  3px 2px 10px white*/
#projectTitle h1{
text-align:center;
color: #057C94 ; /*;0890AB*/
font-weight:bold;
font-size:25px;
font-family:'Times New Roman', Times, serif, Arial, Helvetica, sans-serif;
padding: 3% 0 0 10%;
text-shadow:2px 4px 2px #45D7FA, 2px 0 10px white;
}
/*Main content*/
#plotTabset{
display:flex;
justify-content:center;
}
")
)
), #end of css-----------------
# Application title
div(id="header",
div(
id="projectTitle",
tags$h1("PlotS")
)
),
#content-------------------
div(
id="content",
tabsetPanel(
id = "plotTabset",
tabPanel(title = "About",
#Here instruction for data type will be given
HTML('
<div class = "inst">
<hr></hr>
<p>
<b>PlotS</b> is a web-based application for data analysis and visualization. It is free and easy to use. You can analyze your data in an engaging way by running statistical tests while plotting the graphs. We hope that it will be a useful tool for performing quick analysis.
</p>
<p>
The list of graphs currently available for plotting:
<ul>
<li>Bar plot</li>
<li>Box plot</li>
<li>Density plot</li>
<li>Frequency polygone</li>
<li>Histogram</li>
<li>Line plot</li>
<li>Scatter plot</li>
</ul>
For statistical analysis, we have included the most commonly used parametric and non-parametric methods:
<ul>
<li><b>Parametric test</b></li>
<ul>
<li>T-test</li>
<li>ANOVA (One-way and Two-way)</li>
</ul>
<li><b>Non-parametric test</b></li>
<ul>
<li>Wilcoxon test</li>
<li>Kruskal-Wallis test</li>
</ul>
</p>
</div>'
)#end HTML
),
#Analyze & visualize-------------------
tabPanel(
#This panel will be shown as interactive when the figure is ready
title = "Analyze & visualize", value = "chart", icon = icon("chart-pie"),
"here is the name and title of thhe value of daead andns hthhw"
tabBox(id="tabBox",
source("global.R", local = TRUE)
ui <- fluidPage(
#CSS----------------
tags$head(
tags$style(
HTML("
/*general*/
body{
margin: 0;
font-family: Arial, Helvetica, sans-serif;
font-size:17px;
}
.box{
-moz-box-shadow:none !important;
-webkit-box-shadow:none !important;
-goog-ms-box-shadow:none !important;
box-shadow:none !important;
}
/*Header*/
#header {
overflow: hidden;
/* background-image:linear-gradient(to bottom, rgba(69, 215, 250, 0.3), white);*/
/*background-image:linear-gradient(70deg, white, rgba(69, 215, 250, 0.3), white);*/
background-image:radial-gradient(rgba(12, 191, 227, 1), white, white);
}
#projectTitle{
overflow: hidden;
border-radius:50%;
width:70px;
height:70px;
background-image: radial-gradient(at 80% 20%,  white, #45D7FA);
box-shadow: 10px -5px 10px #06BBE7 inset,  3px 2px 10px white;
margin-bottom:5px;
}
/*perfect 90% 90%  45D7FA
box-shadow: 10px 2px 10px #45D7FA inset,  3px 2px 10px white*/
#projectTitle h1{
text-align:center;
color: #057C94 ; /*;0890AB*/
font-weight:bold;
font-size:25px;
font-family:'Times New Roman', Times, serif, Arial, Helvetica, sans-serif;
padding: 3% 0 0 10%;
text-shadow:2px 4px 2px #45D7FA, 2px 0 10px white;
}
/*Main content*/
#plotTabset{
display:flex;
justify-content:center;
}
")
)
), #end of css-----------------
# Application title
div(id="header",
div(
id="projectTitle",
tags$h1("PlotS")
)
),
#content-------------------
div(
id="content",
tabsetPanel(
id = "plotTabset",
tabPanel(title = "About",
#Here instruction for data type will be given
HTML('
<div class = "inst">
<hr></hr>
<p>
<b>PlotS</b> is a web-based application for data analysis and visualization. It is free and easy to use. You can analyze your data in an engaging way by running statistical tests while plotting the graphs. We hope that it will be a useful tool for performing quick analysis.
</p>
<p>
The list of graphs currently available for plotting:
<ul>
<li>Bar plot</li>
<li>Box plot</li>
<li>Density plot</li>
<li>Frequency polygone</li>
<li>Histogram</li>
<li>Line plot</li>
<li>Scatter plot</li>
</ul>
For statistical analysis, we have included the most commonly used parametric and non-parametric methods:
<ul>
<li><b>Parametric test</b></li>
<ul>
<li>T-test</li>
<li>ANOVA (One-way and Two-way)</li>
</ul>
<li><b>Non-parametric test</b></li>
<ul>
<li>Wilcoxon test</li>
<li>Kruskal-Wallis test</li>
</ul>
</p>
</div>'
)#end HTML
),
#Analyze & visualize-------------------
tabPanel(
#This panel will be shown as interactive when the figure is ready
title = "Analyze & visualize", value = "chart", icon = icon("chart-pie"),
tabBox(id="tabBox",
tabPanel(title = "graphh"),
tabPanel(title = "graph"),
tabPanel(title = "summary")
)
) %>% tagAppendAttributes(class="chartPanel"), #end Analyze & visualize
#help panel----------------
tabPanel(
title = "Help", icon = icon("book-open"),
# includeHTML("www/plotS.Rmd")
includeMarkdown("www/plotS_help.Rmd")
) %>% tagAppendAttributes(class="helpPanel")#end of help section-----------------
)
# tabsetPanel(
#   id = "plotTabset",
#
#   tabPanel(
#     #Here instruction for data type will be given
#     title = "About",
#     # includeHTML("www/plotS_about.html"),
#     # includeMarkdown("www/plotS_about.Rmd"),
#     # HTML instruction---------------
#     HTML('
#                 <div class = "inst">
#                   <hr></hr>
#                   <p>
#                   <b>PlotS</b> is a web-based application for data analysis and visualization. It is free and easy to use. You can analyze your data in an engaging way by running statistical tests while plotting the graphs. We hope that it will be a useful tool for performing quick analysis.
#                   </p>
#                   <p>
#                   The list of graphs currently available for plotting:
#                   <ul>
#                     <li>Bar plot</li>
#                     <li>Box plot</li>
#                     <li>Density plot</li>
#                     <li>Frequency polygone</li>
#                     <li>Histogram</li>
#                     <li>Line plot</li>
#                     <li>Scatter plot</li>
#                   </ul>
#                   For statistical analysis, we have included the most commonly used parametric and non-parametric methods:
#                   <ul>
#                     <li><b>Parametric test</b></li>
#                     <ul>
#                       <li>T-test</li>
#                       <li>ANOVA (One-way and Two-way)</li>
#                    </ul>
#                    <li><b>Non-parametric test</b></li>
#                    <ul>
#                     <li>Wilcoxon test</li>
#                     <li>Kruskal-Wallis test</li>
#                    </ul>
#                   </p>
#                 </div>'
#     )#end HTML
#
#   ) %>% tagAppendAttributes(class="instructionPanel"),#end instruction tab
#
#   #Analyze & visualize-------------------
#   tabPanel(
#     #This panel will be shown as interactive when the figure is ready
#     title = "Analyze & visualize", value = "chart", icon = icon("chart-pie"),
#
#     "here is the name and title of thhe value of daead andns hthhw"
#   ) %>% tagAppendAttributes(class="chartPanel"), #end Analyze & visualize
#
#   #help panel----------------
#   tabPanel(
#     title = "Help", icon = icon("book-open"),
#     # includeHTML("www/plotS.Rmd")
#     includeMarkdown("www/plotS_help.Rmd")
#   ) %>% tagAppendAttributes(class="helpPanel")#end of help section-----------------
# )
)
# Define server logic required to draw a histogram
server <- function(input, output) {
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
#This script has the details code for each plots
library(tidyverse)
#side graph----------
library(ggside)
#inset-------------
?geom_shape()
library(ggforce)
set.seed(10)
sam <- sample_n(data, 5)
data <- read_csv("~/Desktop/bar_data.csv")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
radius = unit(0,"mm"), expand = unit(2, "mm"), #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
sam <- sample_n(data, 5)
set.seed(10)
sam <- sample_n(data, 5)
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
radius = unit(0,"mm"), expand = unit(2, "mm"), #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
radius = unit(0,"mm"), expand = unit(c(1,2,2,2), "mm"), #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
radius = unit(0,"mm"), expand = c(unit(2, "mm"),unit(2, "mm"), unit(1, "mm"), unit(0.5, "mm")), #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
?geom_mark_rect
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
expand = c(unit(2, "mm"),unit(2, "mm"), unit(1, "mm"), unit(0.5, "mm")), #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
expand = c(unit(1, "mm"),unit(2, "mm"), unit(1, "mm"), unit(0.5, "mm")), #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
expand = list(unit(1, "mm"),unit(2, "mm"), unit(1, "mm"), unit(0.5, "mm")), #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
expand = 1, #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
expand = 0, #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
expand = 0.2, #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
expand = unit(2, "mm"), #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
radius = unit(2, "mm"), expand = unit(2, "mm"), #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
radius = unit(0, "mm"), expand = unit(2, "mm"), #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#inset rect
ggplot(data, aes(x=sub, y =value, fill = species))+geom_point()+
geom_mark_rect(data = sam, aes(x = sub, y = value),
radius = unit(0, "mm"), expand = c(1,2,2,1), #expand the marked area
#alpha = 0, #fill = "white",
linetype = "dotted")
#side graph----------
library(ggside)
shiny::runApp()
runApp()
geom_xsidedensity(position = "stack", orientation = "x")
x <- geom_xsidedensity(position = "stack", orientation = "x")
x
